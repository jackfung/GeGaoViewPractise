package com.gaoge.view.practise.bitmap.fun.test.ui;

import android.content.Context;
import android.os.Bundle;
import android.provider.MediaStore.Images;
import android.support.v4.app.Fragment;
import android.view.LayoutInflater;
import android.view.Menu;
import android.view.MenuInflater;
import android.view.View;
import android.view.ViewGroup;
import android.view.ViewGroup.LayoutParams;
import android.widget.BaseAdapter;
import android.widget.GridView;

import com.gaoge.view.practise.bitmap.fun.test.provider.MyImages;
import com.gaoge.view.practise.bitmap.fun.test.util.MyImageCache;
import com.gaoge.view.practise.bitmap.fun.test.util.MyImageCache.MyImageCacheParams;
import com.gaoge.view.practise.bitmap.fun.test.util.MyImageFetcher;
import com.gaoge.view.practise.bitmap.fun.test.util.MyImageResizer;
import com.gaoge.view.practise.bitmap.fun.test.util.MyUtils;
import com.orange.test.textImage.R;


public class MyImageGridFragment extends Fragment {
    private int mImageThumbSize;
    private int mImageThumbSpacing;
    private MyImageResizer mImageWorker;
    
    private static final String IMAGE_CACHE_DIR = "thumbs";
    
    MyImageAdapter mAdapter;
    
    public MyImageGridFragment(){}
    
    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setHasOptionsMenu(true);
        
        mImageThumbSize = getResources().getDimensionPixelSize(R.dimen.image_thumbnail_size);
        mImageThumbSpacing = getResources().getDimensionPixelSize(R.dimen.image_thumbnail_spacing);
        
        mAdapter = new MyImageAdapter(getActivity());
        mImageWorker = new MyImageFetcher(getActivity(), mImageThumbSize);
        
        MyImageCacheParams cacheParams = new MyImageCacheParams(IMAGE_CACHE_DIR);
        
     // Allocate a third of the per-app memory limit to the bitmap memory cache. This value
        // should be chosen carefully based on a number of factors. Refer to the corresponding
        // Android Training class for more discussion:
        // http://developer.android.com/training/displaying-bitmaps/
        // In this case, we aren't using memory for much else other than this activity and the
        // ImageDetailActivity so a third lets us keep all our sample image thumbnails in memory
        // at once.
        cacheParams.memCacheSize = 1024 * 1024 * MyUtils.getMemoryClass(getActivity()) / 3;
        
        // The ImageWorker takes care of loading images into our ImageView children asynchronously
        mImageWorker = new MyImageFetcher(getActivity(), mImageThumbSize);
        mImageWorker.setAdapter(MyImages.imageThumbWorkerUrlsAdapter);
        mImageWorker.setLoadingImage(R.drawable.empty_photo);
        mImageWorker.setImageCache(MyImageCache.findOrCreateCache(getActivity(), cacheParams));
        
    }
    
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
        return super.onCreateView(inflater, container, savedInstanceState);
    }
    
    @Override
    public void onResume() {
        super.onResume();
    }
    
    @Override
    public void onPause() {
        super.onPause();
    }
    
    @Override
    public void onCreateOptionsMenu(Menu menu, MenuInflater inflater) {
        super.onCreateOptionsMenu(menu, inflater);
    }
    
    private class MyImageAdapter extends BaseAdapter{

        private final Context mContext;
        private GridView.LayoutParams mImageViewLayoutParams;
        
        public MyImageAdapter(Context context){
            super();
            mContext = context;
            mImageViewLayoutParams = new GridView.LayoutParams(
                    LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
        }
        @Override
        public int getCount() {
            return 0;
        }

        @Override
        public Object getItem(int position) {
            return null;
        }

        @Override
        public long getItemId(int position) {
            return 0;
        }

        @Override
        public View getView(int position, View convertView, ViewGroup parent) {
            return null;
        }
        
    }

}
